<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Task Details - TaskFlow</title>
    <link rel="stylesheet" href="/css/elegant-styles.css" />
    <style>
      .floating-message {
        position: fixed;
        top: 2rem;
        right: 2rem;
        background: rgba(15, 15, 26, 0.95);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--radius-xl);
        padding: var(--space-4) var(--space-6);
        color: var(--dark-text);
        font-weight: 600;
        box-shadow: var(--shadow-2xl), var(--shadow-glow);
        transform: translateX(400px);
        transition: all var(--transition-bounce);
        z-index: var(--z-toast);
        max-width: 320px;
      }
      
      .floating-message.show {
        transform: translateX(0);
      }
      
      .floating-message.success {
        border-color: rgba(16, 185, 129, 0.4);
        box-shadow: var(--shadow-2xl), 0 0 30px rgba(16, 185, 129, 0.3);
      }
      
      .floating-message.error {
        border-color: rgba(239, 68, 68, 0.4);
        box-shadow: var(--shadow-2xl), 0 0 30px rgba(239, 68, 68, 0.3);
      }
      
      .floating-message.info {
        border-color: rgba(59, 130, 246, 0.4);
        box-shadow: var(--shadow-2xl), 0 0 30px rgba(59, 130, 246, 0.3);
      }
      
      .reading-progress {
        position: fixed;
        top: 0;
        left: 0;
        width: 0%;
        height: 4px;
        background: var(--gradient-hologram);
        background-size: 200% 200%;
        z-index: var(--z-sticky);
        transition: width 0.3s ease;
        animation: hologramShift 3s ease-in-out infinite;
      }
      
      .floating-nav {
        position: fixed;
        bottom: 2rem;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(15, 15, 26, 0.95);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--radius-full);
        padding: var(--space-4) var(--space-6);
        z-index: var(--z-fixed);
        opacity: 0;
        transition: all var(--transition-normal);
        box-shadow: var(--shadow-2xl), var(--shadow-glow);
      }
      
      .floating-nav.visible {
        opacity: 1;
        transform: translateX(-50%) translateY(0);
      }
      
      .word-count {
        font-family: var(--font-mono);
        font-size: 0.75rem;
        color: var(--dark-text-muted);
        text-align: center;
        margin-top: var(--space-4);
        padding: var(--space-4);
        background: rgba(26, 26, 46, 0.6);
        backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-xl);
        transition: all var(--transition-normal);
      }
      
      .word-count:hover {
        border-color: rgba(59, 130, 246, 0.3);
        box-shadow: var(--shadow-lg), 0 0 20px rgba(59, 130, 246, 0.2);
      }
      
      .task-status {
        display: inline-block;
        padding: var(--space-2) var(--space-4);
        border-radius: var(--radius-full);
        font-size: 0.75rem;
        font-weight: 600;
        background: var(--gradient-primary);
        color: white;
        text-transform: uppercase;
        letter-spacing: 1px;
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
      }
      
      .task-status::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        animation: shimmer 2s infinite;
      }
      
      @keyframes shimmer {
        0% { left: -100%; }
        100% { left: 100%; }
      }
      
      .hero-section {
        background: var(--gradient-dark);
        border: 1px solid rgba(255, 255, 255, 0.1);
        position: relative;
        overflow: hidden;
      }
      
      .hero-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-hologram);
        background-size: 200% 200%;
        animation: hologramShift 3s ease-in-out infinite;
      }
      
      .content-card {
        background: var(--gradient-dark);
        border: 1px solid rgba(255, 255, 255, 0.15);
        position: relative;
        overflow: hidden;
      }
      
      .content-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-primary);
      }
      
      .description-content {
        background: rgba(26, 26, 46, 0.6);
        backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-xl);
        padding: var(--space-8);
        transition: all var(--transition-normal);
        position: relative;
        overflow: hidden;
      }
      
      .description-content::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
        transition: left var(--transition-slow);
      }
      
      .description-content:hover::before {
        left: 100%;
      }
      
      .description-content:hover {
        border-color: rgba(59, 130, 246, 0.3);
        box-shadow: var(--shadow-xl), 0 0 20px rgba(59, 130, 246, 0.2);
      }
      
      .metadata-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: var(--space-6);
      }
      
      .metadata-card {
        background: rgba(26, 26, 46, 0.6);
        backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-xl);
        padding: var(--space-6);
        text-align: center;
        transition: all var(--transition-normal);
        position: relative;
        overflow: hidden;
      }
      
      .metadata-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
        transition: left var(--transition-slow);
      }
      
      .metadata-card:hover::before {
        left: 100%;
      }
      
      .metadata-card:hover {
        transform: translateY(-4px) scale(1.02);
        border-color: rgba(59, 130, 246, 0.3);
        box-shadow: var(--shadow-2xl), var(--shadow-glow);
      }
      
      .metadata-icon {
        width: 64px;
        height: 64px;
        border-radius: var(--radius-xl);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
        margin: 0 auto var(--space-4);
        box-shadow: var(--shadow-lg);
        position: relative;
        overflow: hidden;
      }
      
      .metadata-icon::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left var(--transition-slow);
      }
      
      .metadata-icon:hover::before {
        left: 100%;
      }
      
      .actions-section {
        background: var(--gradient-dark);
        border: 1px solid rgba(255, 255, 255, 0.15);
        position: relative;
        overflow: hidden;
      }
      
      .actions-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-secondary);
      }
      
      .action-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--space-4);
      }
      
      .share-modal {
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.8);
        backdrop-filter: blur(10px);
        z-index: var(--z-modal);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--space-6);
        opacity: 0;
        visibility: hidden;
        transition: all var(--transition-normal);
      }
      
      .share-modal.show {
        opacity: 1;
        visibility: visible;
      }
      
      .modal-content {
        background: var(--gradient-dark);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--radius-2xl);
        padding: var(--space-8);
        text-align: center;
        max-width: 400px;
        width: 100%;
        position: relative;
        overflow: hidden;
        transform: scale(0.9);
        transition: transform var(--transition-bounce);
      }
      
      .share-modal.show .modal-content {
        transform: scale(1);
      }
      
      .modal-content::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-secondary);
      }
    </style>
  </head>
  <body>
    
    <!-- Reading Progress Bar -->
    <div class="reading-progress" id="readingProgress"></div>
    
    <!-- Navigation -->
    <nav class="navbar">
      <div class="container">
        <div class="navbar-content">
          <a href="/" class="navbar-brand">
            <div class="logo">T</div>
            <span class="text-gradient-hologram">TaskFlow</span>
          </a>
          
          <div class="navbar-nav">
            <span class="task-status">Active Task</span>
            <a href="/" class="btn btn-secondary btn-sm">
              <span>‚Üê</span> Dashboard
            </a>
          </div>
        </div>
      </div>
    </nav>

    <div class="container">
      
      <!-- Content Header -->
      <section class="hero-section glass-card p-12 mb-8 mt-8 animate-fade-in" id="header">
        <div class="text-center">
          <div class="logo mb-6" style="width: 100px; height: 100px; font-size: 2.5rem; margin: 0 auto; background: var(--gradient-hologram); background-size: 200% 200%; animation: hologramShift 3s ease-in-out infinite;">
            üìã
          </div>
          <h1 class="text-4xl md:text-5xl font-bold text-primary mb-4 leading-tight font-display">
            <%= task.title %>
          </h1>
          <p class="text-xl text-secondary">
            Detailed task information and management
          </p>
        </div>
      </section>

      <!-- Content Body -->
      <div class="max-w-5xl mx-auto">
        <div class="content-card card animate-slide-in" id="content">
          
          <!-- Task Description -->
          <div class="p-8 border-b border-gray-700">
            <div class="flex items-center gap-4 mb-6">
              <div class="logo" style="width: 56px; height: 56px; font-size: 1.5rem; background: var(--gradient-primary);">üìù</div>
              <h2 class="text-3xl font-bold text-primary">Description</h2>
            </div>
          </div>
          
          <div class="p-8">
            <div class="description-content">
              <div class="text-secondary text-lg leading-relaxed font-medium">
                <%= task.description %>
              </div>
              
              <div class="word-count">
                <div class="grid grid-3 gap-4 text-center">
                  <div>
                    <div class="text-primary font-bold text-xl" id="wordCount">0</div>
                    <div class="text-muted text-xs">Words</div>
                  </div>
                  <div>
                    <div class="text-primary font-bold text-xl" id="charCount">0</div>
                    <div class="text-muted text-xs">Characters</div>
                  </div>
                  <div>
                    <div class="text-primary font-bold text-xl" id="readTime">0</div>
                    <div class="text-muted text-xs">Min Read</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Metadata Section -->
        <div class="mt-8" id="metadata">
          <h2 class="text-3xl font-bold text-primary mb-8 text-center font-display">
            Task <span class="text-gradient-hologram">Information</span>
          </h2>
          
          <div class="metadata-grid">
            <div class="metadata-card hover-lift animate-fade-in">
              <div class="metadata-icon" style="background: linear-gradient(135deg, #10b981 0%, #059669 100%);">
                üìÖ
              </div>
              <h3 class="text-lg font-bold text-primary mb-2">Created</h3>
              <p class="text-secondary font-semibold">
                <%= new Date(task.createdAt).toLocaleDateString('en-US', { 
                  weekday: 'short', 
                  year: 'numeric', 
                  month: 'short', 
                  day: 'numeric' 
                }) %>
              </p>
              <p class="text-muted text-sm mt-1 font-mono">
                <%= new Date(task.createdAt).toLocaleTimeString('en-US', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                }) %>
              </p>
            </div>

            <div class="metadata-card hover-lift animate-fade-in stagger-1">
              <div class="metadata-icon" style="background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);">
                üîÑ
              </div>
              <h3 class="text-lg font-bold text-primary mb-2">Updated</h3>
              <p class="text-secondary font-semibold">
                <%= new Date(task.updatedAt).toLocaleDateString('en-US', { 
                  weekday: 'short', 
                  year: 'numeric', 
                  month: 'short', 
                  day: 'numeric' 
                }) %>
              </p>
              <p class="text-muted text-sm mt-1 font-mono">
                <%= new Date(task.updatedAt).toLocaleTimeString('en-US', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                }) %>
              </p>
            </div>

            <div class="metadata-card hover-lift animate-fade-in stagger-2">
              <div class="metadata-icon" style="background: var(--gradient-secondary);">
                üÜî
              </div>
              <h3 class="text-lg font-bold text-primary mb-2">Task ID</h3>
              <p class="text-secondary text-xs font-mono bg-gray-800/50 px-3 py-2 rounded-lg break-all">
                <%= task._id %>
              </p>
            </div>

            <div class="metadata-card hover-lift animate-fade-in stagger-3">
              <div class="metadata-icon" style="background: var(--gradient-tertiary);">
                üìä
              </div>
              <h3 class="text-lg font-bold text-primary mb-2">Status</h3>
              <div class="task-status">
                Active
              </div>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="actions-section card mt-12" id="actions">
          <div class="p-6 border-b border-gray-700">
            <h2 class="text-3xl font-bold text-primary text-center font-display">
              Quick <span class="text-gradient-hologram">Actions</span>
            </h2>
          </div>
          
          <div class="p-6">
            <div class="action-grid">
              <a
                href="/tasks/<%= task._id %>/edit"
                class="btn btn-primary btn-lg w-full hover-scale"
              >
                <span>‚úèÔ∏è</span> Edit Task
              </a>
              
              <a
                href="/tasks/<%= task._id %>/delete"
                class="btn btn-danger btn-lg w-full hover-scale"
              >
                <span>üóëÔ∏è</span> Delete Task
              </a>
              
              <button
                onclick="shareTask()"
                class="btn btn-secondary btn-lg w-full hover-scale"
              >
                <span>üì§</span> Share Task
              </button>
              
              <button
                onclick="printTask()"
                class="btn btn-secondary btn-lg w-full hover-scale"
              >
                <span>üñ®Ô∏è</span> Print
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Floating Navigation -->
    <div class="floating-nav" id="floatingNav">
      <div class="flex items-center gap-4">
        <a href="/" class="text-blue hover:text-blue-400 transition-colors text-sm font-semibold">
          üè† Home
        </a>
        <span class="text-muted">|</span>
        <button onclick="scrollToTop()" class="text-blue hover:text-blue-400 transition-colors text-sm font-semibold">
          ‚¨ÜÔ∏è Top
        </button>
        <span class="text-muted">|</span>
        <button onclick="toggleFullscreen()" class="text-blue hover:text-blue-400 transition-colors text-sm font-semibold">
          üîç Focus
        </button>
      </div>
    </div>

    <!-- Share Modal -->
    <div class="share-modal" id="shareModal">
      <div class="modal-content">
        <div class="logo mb-6" style="width: 80px; height: 80px; font-size: 2rem; margin: 0 auto; background: var(--gradient-secondary);">
          üì§
        </div>
        <h3 class="text-2xl font-bold text-primary mb-4">Share Task</h3>
        <p class="text-secondary mb-6">Task URL copied to clipboard!</p>
        <button onclick="closeShareModal()" class="btn btn-primary hover-scale">
          Got it!
        </button>
      </div>
    </div>

    <!-- Floating Message Container -->
    <div id="floatingMessage" class="floating-message">
      <div class="flex items-center gap-3">
        <span id="messageIcon" class="text-xl"></span>
        <span id="messageText" class="text-sm"></span>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        
        function showFloatingMessage(message, type = 'info', icon = 'üí°', duration = 4000) {
          const floatingMessage = document.getElementById('floatingMessage');
          const messageIcon = document.getElementById('messageIcon');
          const messageText = document.getElementById('messageText');
          
          messageIcon.textContent = icon;
          messageText.textContent = message;
          
          floatingMessage.className = `floating-message ${type}`;
          floatingMessage.classList.add('show');
          
          setTimeout(() => {
            floatingMessage.classList.remove('show');
          }, duration);
        }
        
        // Word and character count
        const description = `<%= task.description %>`;
        const wordCount = description.trim().split(/\s+/).filter(word => word.length > 0).length;
        const charCount = description.length;
        const readTime = Math.max(1, Math.ceil(wordCount / 200)); // Average reading speed
        
        document.getElementById('wordCount').textContent = wordCount;
        document.getElementById('charCount').textContent = charCount;
        document.getElementById('readTime').textContent = readTime;
        
        // Reading progress
        function updateReadingProgress() {
          const scrollTop = window.pageYOffset;
          const docHeight = document.documentElement.scrollHeight - window.innerHeight;
          const scrollPercent = Math.min((scrollTop / docHeight) * 100, 100);
          
          document.getElementById('readingProgress').style.width = scrollPercent + '%';
        }
        
        // Floating navigation visibility
        function updateFloatingNav() {
          const floatingNav = document.getElementById('floatingNav');
          const scrollTop = window.pageYOffset;
          
          if (scrollTop > 300) {
            floatingNav.classList.add('visible');
          } else {
            floatingNav.classList.remove('visible');
          }
        }
        
        // Scroll event listener
        window.addEventListener('scroll', function() {
          updateReadingProgress();
          updateFloatingNav();
        });
        
        // Initialize
        updateReadingProgress();
        updateFloatingNav();
        
        // Card hover effects
        const cards = document.querySelectorAll('.description-content, .metadata-card');
        cards.forEach(card => {
          card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-4px) scale(1.02)';
            this.style.borderColor = 'rgba(59, 130, 246, 0.3)';
            this.style.boxShadow = 'var(--shadow-2xl), var(--shadow-glow)';
          });
          
          card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
            this.style.borderColor = 'rgba(255, 255, 255, 0.1)';
            this.style.boxShadow = '';
          });
        });
        
        // Metadata cards floating animation
        const metadataCards = document.querySelectorAll('.metadata-card');
        metadataCards.forEach((card, index) => {
          setInterval(() => {
            if (!card.matches(':hover')) {
              card.style.transform = `translateY(${Math.sin(Date.now() * 0.001 + index) * 2}px)`;
            }
          }, 50);
        });
        
        // Welcome message
        setTimeout(() => {
          showFloatingMessage('Task details loaded successfully!', 'success', 'üìã');
        }, 1000);
        
        // Reading time message
        setTimeout(() => {
          showFloatingMessage(`Estimated reading time: ${readTime} minute${readTime > 1 ? 's' : ''}`, 'info', '‚è±Ô∏è', 3000);
        }, 2000);
        
        // Add smooth scroll behavior
        document.documentElement.style.scrollBehavior = 'smooth';
      });
      
      // Utility functions
      function scrollToTop() {
        window.scrollTo({ top: 0, behavior: 'smooth' });
        showFloatingMessage('Scrolled to top', 'info', '‚¨ÜÔ∏è', 2000);
      }
      
      function shareTask() {
        if (navigator.share) {
          navigator.share({
            title: '<%= task.title %>',
            text: '<%= task.description %>',
            url: window.location.href
          }).then(() => {
            showFloatingMessage('Task shared successfully!', 'success', 'üì§');
          }).catch(() => {
            copyToClipboard();
          });
        } else {
          copyToClipboard();
        }
      }
      
      function copyToClipboard() {
        navigator.clipboard.writeText(window.location.href).then(() => {
          document.getElementById('shareModal').classList.add('show');
          showFloatingMessage('Task URL copied to clipboard!', 'success', 'üìã');
        }).catch(() => {
          showFloatingMessage('Failed to copy URL', 'error', '‚ùå');
        });
      }
      
      function closeShareModal() {
        document.getElementById('shareModal').classList.remove('show');
      }
      
      function printTask() {
        showFloatingMessage('Preparing for print...', 'info', 'üñ®Ô∏è');
        setTimeout(() => {
          window.print();
        }, 500);
      }
      
      function toggleFullscreen() {
        if (!document.fullscreenElement) {
          document.documentElement.requestFullscreen().then(() => {
            showFloatingMessage('Entered fullscreen mode', 'info', 'üîç');
          });
        } else {
          document.exitFullscreen().then(() => {
            showFloatingMessage('Exited fullscreen mode', 'info', 'üîç');
          });
        }
      }
      
      // Keyboard shortcuts
      document.addEventListener('keydown', function(e) {
        // F11 for fullscreen
        if (e.key === 'F11') {
          e.preventDefault();
          toggleFullscreen();
        }
        
        // Ctrl+P for print
        if (e.ctrlKey && e.key === 'p') {
          e.preventDefault();
          printTask();
        }
        
        // Ctrl+S for share
        if (e.ctrlKey && e.key === 's') {
          e.preventDefault();
          shareTask();
        }
        
        // Home key to scroll to top
        if (e.key === 'Home') {
          e.preventDefault();
          scrollToTop();
        }
        
        // Escape to close modals
        if (e.key === 'Escape') {
          document.getElementById('shareModal').classList.remove('show');
        }
      });
      
      // Close share modal on backdrop click
      document.getElementById('shareModal').addEventListener('click', function(e) {
        if (e.target === this) {
          closeShareModal();
        }
      });
    </script>
  </body>
</html>

