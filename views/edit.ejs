<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Edit Task - TaskFlow</title>
    <link rel="stylesheet" href="/css/elegant-styles.css" />
    <style>
      .floating-message {
        position: fixed;
        top: 2rem;
        right: 2rem;
        background: rgba(15, 15, 26, 0.95);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--radius-xl);
        padding: var(--space-4) var(--space-6);
        color: var(--dark-text);
        font-weight: 600;
        box-shadow: var(--shadow-2xl), var(--shadow-glow);
        transform: translateX(400px);
        transition: all var(--transition-bounce);
        z-index: var(--z-toast);
        max-width: 320px;
      }
      
      .floating-message.show {
        transform: translateX(0);
      }
      
      .floating-message.success {
        border-color: rgba(16, 185, 129, 0.4);
        box-shadow: var(--shadow-2xl), 0 0 30px rgba(16, 185, 129, 0.3);
      }
      
      .floating-message.error {
        border-color: rgba(239, 68, 68, 0.4);
        box-shadow: var(--shadow-2xl), 0 0 30px rgba(239, 68, 68, 0.3);
      }
      
      .floating-message.info {
        border-color: rgba(59, 130, 246, 0.4);
        box-shadow: var(--shadow-2xl), 0 0 30px rgba(59, 130, 246, 0.3);
      }
      
      .char-counter {
        font-size: 0.75rem;
        color: var(--dark-text-muted);
        text-align: right;
        margin-top: var(--space-2);
        font-family: var(--font-mono);
        padding: var(--space-2) var(--space-3);
        background: rgba(26, 26, 46, 0.4);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-lg);
        transition: all var(--transition-normal);
      }
      
      .char-counter.warning {
        color: var(--warning-500);
        border-color: rgba(245, 158, 11, 0.3);
        background: rgba(245, 158, 11, 0.1);
      }
      
      .char-counter.danger {
        color: var(--error-500);
        border-color: rgba(239, 68, 68, 0.3);
        background: rgba(239, 68, 68, 0.1);
      }
      
      .hero-section {
        background: var(--gradient-dark);
        border: 1px solid rgba(255, 255, 255, 0.1);
        position: relative;
        overflow: hidden;
      }
      
      .hero-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-tertiary);
      }
      
      .edit-form-card {
        background: var(--gradient-dark);
        border: 1px solid rgba(255, 255, 255, 0.15);
        position: relative;
        overflow: hidden;
      }
      
      .edit-form-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-primary);
      }
      
      .form-section {
        background: rgba(26, 26, 46, 0.6);
        backdrop-filter: blur(15px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-xl);
        padding: var(--space-6);
        margin-bottom: var(--space-6);
        transition: all var(--transition-normal);
        position: relative;
        overflow: hidden;
      }
      
      .form-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
        transition: left var(--transition-slow);
      }
      
      .form-section:hover::before {
        left: 100%;
      }
      
      .form-section:hover {
        border-color: rgba(59, 130, 246, 0.3);
        box-shadow: var(--shadow-xl), 0 0 20px rgba(59, 130, 246, 0.2);
      }
      
      .section-header {
        display: flex;
        align-items: center;
        margin-bottom: var(--space-4);
      }
      
      .section-icon {
        width: 40px;
        height: 40px;
        border-radius: var(--radius-lg);
        background: var(--gradient-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        color: white;
        margin-right: var(--space-4);
        box-shadow: var(--shadow-md);
      }
      
      .info-card {
        background: var(--gradient-dark);
        border: 1px solid rgba(255, 255, 255, 0.15);
        position: relative;
        overflow: hidden;
      }
      
      .info-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--gradient-secondary);
      }
      
      .info-item {
        background: rgba(26, 26, 46, 0.4);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
        transition: all var(--transition-normal);
        position: relative;
        overflow: hidden;
      }
      
      .info-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
        transition: left var(--transition-slow);
      }
      
      .info-item:hover::before {
        left: 100%;
      }
      
      .info-item:hover {
        transform: translateY(-2px);
        border-color: rgba(59, 130, 246, 0.3);
        box-shadow: var(--shadow-lg), 0 0 15px rgba(59, 130, 246, 0.2);
      }
      
      .auto-save-indicator {
        position: fixed;
        top: 50%;
        right: 2rem;
        transform: translateY(-50%);
        background: rgba(15, 15, 26, 0.95);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: var(--radius-xl);
        padding: var(--space-3) var(--space-4);
        color: var(--dark-text);
        font-weight: 600;
        font-size: 0.875rem;
        box-shadow: var(--shadow-xl);
        opacity: 0;
        transition: all var(--transition-normal);
        z-index: var(--z-tooltip);
      }
      
      .auto-save-indicator.show {
        opacity: 1;
        transform: translateY(-50%) translateX(0);
      }
      
      .auto-save-indicator.saving {
        border-color: rgba(59, 130, 246, 0.4);
        box-shadow: var(--shadow-xl), 0 0 20px rgba(59, 130, 246, 0.3);
      }
      
      .auto-save-indicator.saved {
        border-color: rgba(16, 185, 129, 0.4);
        box-shadow: var(--shadow-xl), 0 0 20px rgba(16, 185, 129, 0.3);
      }
    </style>
  </head>
  <body>
    
    <!-- Navigation -->
    <nav class="navbar">
      <div class="container">
        <div class="navbar-content">
          <a href="/" class="navbar-brand">
            <div class="logo">T</div>
            <span class="text-gradient-hologram">TaskFlow</span>
          </a>
          
          <div class="navbar-nav">
            <a href="/" class="btn btn-secondary btn-sm">
              <span>‚Üê</span> Back to Dashboard
            </a>
          </div>
        </div>
      </div>
    </nav>

    <div class="container">
      <!-- Header Section -->
      <section class="hero-section glass-card p-12 mb-8 mt-8 animate-fade-in">
        <div class="text-center">
          <div class="logo mb-6" style="width: 80px; height: 80px; font-size: 2rem; margin: 0 auto; background: var(--gradient-tertiary);">
            ‚úèÔ∏è
          </div>
          <h1 class="text-4xl font-bold text-primary mb-4 font-display">
            Edit <span class="text-gradient-hologram">Task</span>
          </h1>
          <p class="text-xl text-secondary">
            Update your task details and save changes
          </p>
        </div>
      </section>

      <!-- Edit Form -->
      <div class="max-w-4xl mx-auto">
        <div class="edit-form-card card animate-slide-in">
          <div class="p-8 border-b border-gray-700">
            <h2 class="text-2xl font-bold text-primary">Task Details</h2>
            <p class="text-muted mt-2">Modify your task information below</p>
          </div>
          
          <div class="p-8">
            <form action="/tasks/<%= task._id %>" method="POST" class="space-y-8" id="editForm">
              
              <!-- Task Title Section -->
              <div class="form-section">
                <div class="section-header">
                  <div class="section-icon">üìù</div>
                  <h3 class="text-xl font-semibold text-primary">Task Title</h3>
                </div>
                
                <div class="form-group">
                  <input
                    type="text"
                    name="title"
                    value="<%= task.title %>"
                    class="form-input focus-ring text-lg font-semibold"
                    placeholder="Enter task title..."
                    maxlength="100"
                    id="titleInput"
                    required
                  />
                  <div class="char-counter" id="titleCounter">
                    <span id="titleCount">0</span>/100 characters
                  </div>
                </div>
              </div>

              <!-- Task Description Section -->
              <div class="form-section">
                <div class="section-header">
                  <div class="section-icon">üìÑ</div>
                  <h3 class="text-xl font-semibold text-primary">Description</h3>
                </div>
                
                <div class="form-group">
                  <textarea
                    name="description"
                    class="form-input form-textarea focus-ring"
                    placeholder="Describe your task in detail..."
                    maxlength="500"
                    id="descriptionInput"
                    required
                  ><%= task.description %></textarea>
                  <div class="char-counter" id="descriptionCounter">
                    <span id="descriptionCount">0</span>/500 characters
                  </div>
                </div>
              </div>

              <!-- Action Buttons -->
              <div class="flex flex-col sm:flex-row gap-4 justify-center">
                <button type="submit" class="btn btn-primary btn-lg hover-scale">
                  <span>üíæ</span> Save Changes
                </button>
                
                <a href="/" class="btn btn-secondary btn-lg hover-scale text-center">
                  <span>‚ùå</span> Cancel
                </a>
              </div>
            </form>
          </div>
        </div>
        
        <!-- Task Info -->
        <div class="info-card card mt-8 animate-fade-in stagger-2">
          <div class="p-6 border-b border-gray-700">
            <h3 class="text-lg font-semibold text-primary">Task Information</h3>
          </div>
          <div class="p-6">
            <div class="grid grid-1 md:grid-2 gap-6">
              <div class="info-item">
                <div class="text-sm text-secondary mb-1">Created</div>
                <div class="text-primary font-semibold">
                  <%= new Date(task.createdAt).toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  }) %>
                </div>
                <div class="text-sm text-muted mt-1 font-mono">
                  <%= new Date(task.createdAt).toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  }) %>
                </div>
              </div>
              
              <div class="info-item">
                <div class="text-sm text-secondary mb-1">Last Modified</div>
                <div class="text-primary font-semibold">
                  <%= new Date(task.updatedAt).toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  }) %>
                </div>
                <div class="text-sm text-muted mt-1 font-mono">
                  <%= new Date(task.updatedAt).toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  }) %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Floating Message Container -->
    <div id="floatingMessage" class="floating-message">
      <div class="flex items-center gap-3">
        <span id="messageIcon" class="text-xl"></span>
        <span id="messageText" class="text-sm"></span>
      </div>
    </div>

    <!-- Auto-save Indicator -->
    <div id="autoSaveIndicator" class="auto-save-indicator">
      <div class="flex items-center gap-2">
        <span id="saveIcon">üíæ</span>
        <span id="saveText">Changes detected...</span>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const titleInput = document.getElementById('titleInput');
        const descriptionInput = document.getElementById('descriptionInput');
        const titleCount = document.getElementById('titleCount');
        const descriptionCount = document.getElementById('descriptionCount');
        const titleCounter = document.getElementById('titleCounter');
        const descriptionCounter = document.getElementById('descriptionCounter');
        const autoSaveIndicator = document.getElementById('autoSaveIndicator');
        const saveIcon = document.getElementById('saveIcon');
        const saveText = document.getElementById('saveText');
        
        function showFloatingMessage(message, type = 'info', icon = 'üí°', duration = 4000) {
          const floatingMessage = document.getElementById('floatingMessage');
          const messageIcon = document.getElementById('messageIcon');
          const messageText = document.getElementById('messageText');
          
          messageIcon.textContent = icon;
          messageText.textContent = message;
          
          floatingMessage.className = `floating-message ${type}`;
          floatingMessage.classList.add('show');
          
          setTimeout(() => {
            floatingMessage.classList.remove('show');
          }, duration);
        }
        
        // Character counters
        function updateTitleCount() {
          const count = titleInput.value.length;
          titleCount.textContent = count;
          
          titleCounter.classList.remove('warning', 'danger');
          if (count > 80) {
            titleCounter.classList.add('warning');
          }
          if (count > 95) {
            titleCounter.classList.add('danger');
          }
        }
        
        function updateDescriptionCount() {
          const count = descriptionInput.value.length;
          descriptionCount.textContent = count;
          
          descriptionCounter.classList.remove('warning', 'danger');
          if (count > 400) {
            descriptionCounter.classList.add('warning');
          }
          if (count > 475) {
            descriptionCounter.classList.add('danger');
          }
        }
        
        // Initialize counters
        updateTitleCount();
        updateDescriptionCount();
        
        // Add event listeners
        titleInput.addEventListener('input', updateTitleCount);
        descriptionInput.addEventListener('input', updateDescriptionCount);
        
        // Form enhancements
        const inputs = document.querySelectorAll('.form-input');
        inputs.forEach(input => {
          input.addEventListener('focus', function() {
            this.style.transform = 'scale(1.01)';
            this.style.borderColor = 'var(--primary-500)';
            this.style.boxShadow = '0 0 0 4px rgba(59, 130, 246, 0.15), var(--shadow-lg)';
            this.style.background = 'var(--dark-surface-2)';
          });
          
          input.addEventListener('blur', function() {
            this.style.transform = 'scale(1)';
            this.style.borderColor = 'var(--dark-border)';
            this.style.boxShadow = 'var(--shadow-inner)';
            this.style.background = 'var(--dark-surface)';
          });
          
          // Typing effect
          input.addEventListener('input', function() {
            this.style.borderColor = 'var(--success-500)';
            setTimeout(() => {
              if (this === document.activeElement) {
                this.style.borderColor = 'var(--primary-500)';
              }
            }, 200);
          });
        });
        
        // Save button animation
        const saveButton = document.querySelector('button[type="submit"]');
        const editForm = document.getElementById('editForm');
        
        saveButton.addEventListener('click', function(e) {
          this.style.transform = 'scale(0.98)';
          this.innerHTML = '<span>üîÑ</span> Saving...';
          
          setTimeout(() => {
            this.style.transform = 'scale(1)';
          }, 150);
          
          showFloatingMessage('Saving your changes...', 'info', 'üíæ');
        });
        
        // Form validation
        editForm.addEventListener('submit', function(e) {
          const title = titleInput.value.trim();
          const description = descriptionInput.value.trim();
          
          if (!title) {
            e.preventDefault();
            showFloatingMessage('Please enter a task title', 'error', '‚ùå');
            titleInput.focus();
            return;
          }
          
          if (!description) {
            e.preventDefault();
            showFloatingMessage('Please enter a task description', 'error', '‚ùå');
            descriptionInput.focus();
            return;
          }
          
          if (title.length < 3) {
            e.preventDefault();
            showFloatingMessage('Title must be at least 3 characters', 'error', '‚ùå');
            titleInput.focus();
            return;
          }
        });
        
        // Auto-save indicator (visual feedback)
        let saveTimeout;
        function showAutoSaveIndicator() {
          clearTimeout(saveTimeout);
          
          autoSaveIndicator.className = 'auto-save-indicator saving show';
          saveIcon.textContent = 'üíæ';
          saveText.textContent = 'Changes detected...';
          
          saveTimeout = setTimeout(() => {
            autoSaveIndicator.className = 'auto-save-indicator saved show';
            saveIcon.textContent = '‚úÖ';
            saveText.textContent = 'Ready to save';
            
            setTimeout(() => {
              autoSaveIndicator.classList.remove('show');
            }, 2000);
          }, 1000);
        }
        
        titleInput.addEventListener('input', showAutoSaveIndicator);
        descriptionInput.addEventListener('input', showAutoSaveIndicator);
        
        // Input validation feedback
        titleInput.addEventListener('input', function() {
          const title = this.value.trim();
          if (title.length >= 3) {
            showFloatingMessage('Title looks good!', 'success', 'üìù', 2000);
          }
        });
        
        descriptionInput.addEventListener('input', function() {
          const description = this.value.trim();
          if (description.length >= 10) {
            showFloatingMessage('Great description!', 'success', 'üìÑ', 2000);
          }
        });
        
        // Card hover effects
        const cards = document.querySelectorAll('.form-section, .info-item');
        cards.forEach(card => {
          card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.borderColor = 'rgba(59, 130, 246, 0.3)';
            this.style.boxShadow = 'var(--shadow-xl), 0 0 20px rgba(59, 130, 246, 0.2)';
          });
          
          card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.borderColor = 'rgba(255, 255, 255, 0.1)';
            this.style.boxShadow = '';
          });
        });
        
        // Welcome message
        setTimeout(() => {
          showFloatingMessage('Edit your task with precision!', 'info', '‚úèÔ∏è');
        }, 1000);
        
        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
          // Ctrl+S to save
          if (e.ctrlKey && e.key === 's') {
            e.preventDefault();
            editForm.submit();
          }
          
          // Escape to cancel
          if (e.key === 'Escape') {
            window.location.href = '/';
          }
        });
      });
    </script>
  </body>
</html>

